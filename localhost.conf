[req]
prompt = no

distinguished_name = my_dn

# !!!Рассмотрим https протокол. Часто бывает так что между браузером клиента и фронтендом и между фронтендом и бекендом
# передаються конфиденциальные данные. С помощь https можно зашифровать эти данные. Шифруються эти данные с помощью
# TLS или SSL протоколов. Также для пересылки зашифрованых данных с помошью https доменное имя https сайта должно 
# быть сертифицировано. Это значит что должен быть сторонний сервис (например verisign или другие) который подтверждает
# (выдает сертификат https сайту) что с https сайтом на который совершаеться переход все в порядке что он тот 
# за кого себя выдает, что доменное имя не фальшивое и с сайтом нет никаких проблем. Тоесть когда пользователь 
# совершает переход на сайт https://mysite.com будет совершена проверка сертификата сайта посредством отправки этого
# сертификата третьей стороне которая его выдала, эта третья сторона проверяет настоящий ли он и все ли с ним все в порядке. 
# Если проверка прошла успешно то происходит переход. За сертификат на каком либо стороннем сервисе
# нужно платить но мы воспользуемся бесплатным тестовым сертификатом который выдадим сами себе. Браузером будет
# выводиться предупреждения при переходе на самосеритифицированый сайт что он являеться таковым. Зато данные зашифрованы.
# Большой плюс https в том что нового кода писать почти не нужно. 
# !!!Обеспечим безопасное соединение с помощью https между браузером и фронтендом.
# Для начала скачиваем установочник Win64 OpenSSL v1.1 Light его легко найти в интернете. Устанавливаем.
# В системные переменные в Path добаляем C:\Program Files\OpenSSL-Win64\bin. Далее создадим файл конфигураций 
# который нужен для генерации сертификата. Здесь для генерации сертификата нужно предоставить некоторые данные 
# типа страны, города, организации, подразделения организации и доменного имени. Укажите какие либо свои или можете оставить эти.
[my_dn]
commonName=localhost
countryName=Ukraine
localityName=Zaporizhzhya
organizationName=SomeOrganisation
organizationalUnitName=JustPracticing
# Утилитой openssl создадим необходимый файл с ключами и файл сертификата который мы выдаем сами себе
# openssl req -x509 -out ssl-localhost\localhost.crt -keyout ssl-localhost\localhost.key -newkey rsa:2048 -nodes -sha256 -days 365 -config localhost.conf
# здесь мы указываем имена и мстонахождение файлов ключа и сертификата, некоторые параметры шифрования, 
# время жизни сертификата и сайл с конфигурациями который мы только что создали.
# Запускаем Angular сервер коммандой с использованием сгенерированых файлов
# ng serve --ssl=true --ssl-key=./ssl-localhost/localhost.key --ssl-cert=./ssl-localhost/localhost.crt. 
# Не забываем везде где в коде писали http изменить на https и на Okta сайте тоже не забываем
# (в Applications в приложении где мы копировали код также в разделе Security -> Api -> Trusted Origins).